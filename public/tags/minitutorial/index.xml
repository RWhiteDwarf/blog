<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>minitutorial on R with White Dwarf</title>
    <link>https://blog.rwhitedwarf.com/tags/minitutorial/</link>
    <description>Recent content in minitutorial on R with White Dwarf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.rwhitedwarf.com/tags/minitutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mini tutorial: hacer tipo lógico cualquier texto</title>
      <link>https://blog.rwhitedwarf.com/es/post/2022/minitut_makebool/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/es/post/2022/minitut_makebool/</guid>
      <description>&lt;h2 id=&#34;acerca-de-este-post&#34;&gt;Acerca de este post.&lt;/h2&gt;
&lt;p&gt;Este es mi primer post en español. Es en realidad la traducción de un post que escribí originalmente en inglés hace un par de meses. Pueden ver el post original &lt;a href=&#34;https://blog.rwhitedwarf.com/post/minitut_makebool/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;. Espero que sea útil para la comunidad hispanohablante de usuarios de R.&lt;/p&gt;
&lt;p&gt;Este post se basa en un trabajo reciente donde mi tarea fue la revisión y depuración de piezas de código pequeñas o simples que pueden resultar en consejos prácticos y rápidos para otros usuarios de R, especialmente principiantes o personas sin mucha experiencia en el uso de R.&lt;/p&gt;
&lt;p&gt;Con ese objetivo en mente, mientras recuperaba un poco de mi tiempo libre y un poco de estabilidad mental, y celebraba mi nuevo puesto como programador en R, decidí crear publicaciones simples pero útiles llamadas &lt;strong&gt;mini tutoriales&lt;/strong&gt;, comenzando con un ejemplo muy simple, incluso tonto, pero útil.&lt;/p&gt;
&lt;h2 id=&#34;mini-tutorial-hacer-lógico-cualquier-texto-make_logical_any_string&#34;&gt;Mini tutorial: Hacer lógico cualquier texto (make_logical_any_string).&lt;/h2&gt;
&lt;p&gt;Una función para hacer lógica cualquier texto en R.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;make_logical_any_string &amp;lt;- function(texto){
    texto &amp;lt;- as.character(texto)
    resultado_logico &amp;lt;- as.logical(texto)
    if(is.na(resultado_logico)){resultado_logico &amp;lt;- FALSE}
    return(resultado_logico)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función toma cualquier valor, lo convierte en texto (character) y devuelve &lt;code&gt;TRUE&lt;/code&gt; SÓLO SI el valor adopta cualquiera de las siguientes formas: &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;TRUE&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; o &lt;code&gt;TRUE&lt;/code&gt;, el último el valor lógico, no en formato texto.&lt;/p&gt;
&lt;h3 id=&#34;lógica-de-la-función&#34;&gt;Lógica de la función&lt;/h3&gt;
&lt;p&gt;La función &lt;code&gt;as.character()&lt;/code&gt; convierte cualquier forma de texto &amp;ldquo;true&amp;rdquo; listado arriba en un &lt;code&gt;TRUE&lt;/code&gt; lógico. Si el texto es &lt;code&gt;&amp;quot;False&amp;quot;&lt;/code&gt; o sus formas equivalentes, la función devolverá &lt;code&gt;FALSE&lt;/code&gt;. Si se pasa cualquier otro valor a la función, el resultado será &lt;code&gt;NA&lt;/code&gt;. Por lo tanto, necesitamos modificar los resultados cuando se producen NA, ya que necesitamos un resultado de Verdadero/Falso. Así que implementamos &lt;code&gt;if(is.na(resultado_logico)){resultado_logico &amp;lt;- FALSE}&lt;/code&gt; que obligará a cualquier otra cadena de texto a devolver &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Estamos usando este código para ejecutar scripts de R en la consola que pasa una serie de argumentos para su funcionamiento, algunos de los cuales deben ser &amp;ldquo;TRUE&amp;rdquo; solo cuando se especifica, y &amp;ldquo;FALSE&amp;rdquo; en cualquier otro caso, de ahí el truco de convertir cualquier otro valor a &lt;code&gt;FALSE&lt;/code&gt; en lugar de &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Algo importante a tomar en cuenta es que los argumentos siempre se pasan al script R como texto y, por lo tanto, escribí el ejemplo para esta publicación convirtiendo todo en texto en la primera línea de la función, lo cual no es necesario en nuestro código original ejecutado en el Terminal. De esta forma, si se le pasa algún número a la función, también devolverá &lt;code&gt;FALSE&lt;/code&gt;, emulando lo que pasaría si se ingresa un número en la consola. Este comportamiento &lt;strong&gt;es diferente para la función&lt;/strong&gt; &lt;code&gt;as.logical()&lt;/code&gt;, que devuelve &lt;code&gt;FALSE&lt;/code&gt; si ingresa el valor numérico &lt;code&gt;0&lt;/code&gt; y &lt;code&gt;TRUE&lt;/code&gt; si se ingresa cualquier otro valor numérico.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minitutorial: make_logical any string</title>
      <link>https://blog.rwhitedwarf.com/post/minitut_makebool/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/post/minitut_makebool/</guid>
      <description>&lt;h2 id=&#34;welcome-to-r-minitutorials-of-r-white-dwarf&#34;&gt;Welcome to R minitutorials of R White Dwarf&lt;/h2&gt;
&lt;p&gt;Since the beginning of this year I&amp;rsquo;ve been forced to abandon completely the blog for countless and rather abstract personal reasons that include personal health, family matters and changes in my daily activities including volunteer work as well as main job. As part of the last, I finally got hired for a position as R developer, which brings great joy to me.&lt;/p&gt;
&lt;p&gt;Thus, I&amp;rsquo;ve been using R more lately in all kinds of forms, including review and debug of small or simple code pieces that can result in practical quick hints for other R users, especially beginners or people with not much experience using R.&lt;/p&gt;
&lt;p&gt;With that aim in mind while regaining a little bit of my free time and a piece of mental stability, and celebrating my new position, I decided to take care of the blog again with simple yet useful posts called &lt;strong&gt;minitutorials&lt;/strong&gt;, starting with a very simple, even silly, but useful example.&lt;/p&gt;
&lt;p&gt;I hope they can be useful for you or your friends. Enjoy them!&lt;/p&gt;
&lt;h2 id=&#34;minitutorial-make_logical_any_string&#34;&gt;Minitutorial: make_logical_any_string&lt;/h2&gt;
&lt;p&gt;A function to make logical any string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;make_logical_any_string &amp;lt;- function(a_string){
    a_string &amp;lt;- as.character(a_string)
    logical_result &amp;lt;- as.logical(a_string)
    if(is.na(logical_result)){logical_result &amp;lt;- FALSE}
    return(logical_result)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function takes any value, convert it to character and returns &lt;code&gt;TRUE&lt;/code&gt; ONLY IF the value takes either of the following forms: &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;TRUE&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;True&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; or &lt;code&gt;TRUE&lt;/code&gt;, the last one the logical value, not the string.&lt;/p&gt;
&lt;h3 id=&#34;logic-of-the-function&#34;&gt;Logic of the function&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;as.character()&lt;/code&gt; will convert any of the true strings listed above into a logical &lt;code&gt;TRUE&lt;/code&gt;. If the string is rather &lt;code&gt;&amp;quot;False&amp;quot;&lt;/code&gt; or its equivalent forms, the function will return &lt;code&gt;FALSE&lt;/code&gt;. If any other character is passed to the function, the result will be &lt;code&gt;NA&lt;/code&gt;. Therefore, we need to tweak the results when NA&amp;rsquo;s are produced since we forcefully need a True/False result. Thus, we implement &lt;code&gt;if(is.na(logical_result)){logical_result &amp;lt;- FALSE}&lt;/code&gt; which will force any other string to return &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We are using this code for running R scripts in the terminal which passes a series of arguments for its functioning, some of which are required to be &lt;code&gt;TRUE&lt;/code&gt; only when specified so, and &lt;code&gt;FALSE&lt;/code&gt; in any other case, hence the trick of converting any other value to &lt;code&gt;FALSE&lt;/code&gt; rather than &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Something to keep in mind is that the arguments are always passed to R script as character and thus, I wrote the example for this post converting everything into character in the first line of the function, which is not necessary in our original code executed in the terminal. In this way, if any number is passed to the function, it will also return &lt;code&gt;FALSE&lt;/code&gt;, emulating what would happen if a number is entered into the console. This behavior &lt;strong&gt;is different for the function&lt;/strong&gt; &lt;code&gt;as.logical()&lt;/code&gt; itself, which returns &lt;code&gt;FALSE&lt;/code&gt; if you enter the numerical value &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;TRUE&lt;/code&gt; if any other numerical value is passed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
