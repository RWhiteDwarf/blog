<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R maps on R with White Dwarf</title>
    <link>https://blog.rwhitedwarf.com/tags/r-maps/</link>
    <description>Recent content in R maps on R with White Dwarf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.rwhitedwarf.com/tags/r-maps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Map any region in the world with R - Part II: Obtaining the coordinates</title>
      <link>https://blog.rwhitedwarf.com/post/map_any_region_with_ggplot2_part_ii/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/post/map_any_region_with_ggplot2_part_ii/</guid>
      <description>&lt;h2 id=&#34;scope-of-this-post&#34;&gt;Scope of this post&lt;/h2&gt;
&lt;p&gt;This is the second part of the series to create a map of any region of the world with R.&lt;/p&gt;
&lt;p&gt;We are creating maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to &lt;strong&gt;map any region of the world with R&lt;/strong&gt;. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34;&gt;ggplot2&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt; packages, using support of &lt;a href=&#34;https://www.openstreetmap.org/&#34; target=&#34;_blank&#34;&gt;Open Street Map&lt;/a&gt; to obtain the coordinates of cities and finally making it interactive with &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34;&gt;shiny&lt;/a&gt;. The project is quite long for a single post, so my idea is to split it into a few smaller blog posts. So far, the list is a follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rwhitedwarf.com/post/map_any_region_with_ggplot2_part_i/&#34; target=&#34;_blank&#34;&gt;The basic map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web scrapping with nominatim open street maps&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Maps with cities&lt;/li&gt;
&lt;li&gt;Dynamic maps in time&lt;/li&gt;
&lt;li&gt;Making a single script for fast replication&lt;/li&gt;
&lt;li&gt;Making the code interactive in a shiny app&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideas is to share the how-to of one of the projects I am most proud of and, at the same time to give back to the R community in hopes that it can help somebody else.&lt;/p&gt;
&lt;p&gt;I hope you all enjoy it. Feel free to leave any kind of comment and/or question at the end.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_DrawingMap.png&#34; alt=&#34;R Maps&#34; /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;open-street-maps-and-nominatim&#34;&gt;Open Street Maps and Nominatim&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple query&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;RJSONIO&#39;)

site &amp;lt;- (&amp;quot;http://nominatim.openstreetmap.org/search?city=Texcoco&amp;amp;limit=9&amp;amp;format=json&amp;quot;)
(result &amp;lt;- fromJSON(site))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [[1]]
&amp;gt; [[1]]$place_id
&amp;gt; [1] 1177116
&amp;gt; 
&amp;gt; [[1]]$licence
&amp;gt; [1] &amp;quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$osm_type
&amp;gt; [1] &amp;quot;node&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$osm_id
&amp;gt; [1] 336169214
&amp;gt; 
&amp;gt; [[1]]$boundingbox
&amp;gt; [1] &amp;quot;29.619&amp;quot;       &amp;quot;29.659&amp;quot;       &amp;quot;-111.0786667&amp;quot; &amp;quot;-111.0386667&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$lat
&amp;gt; [1] &amp;quot;29.639&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$lon
&amp;gt; [1] &amp;quot;-111.0586667&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$display_name
&amp;gt; [1] &amp;quot;Texcoco, Carbó, Sonora, México&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$class
&amp;gt; [1] &amp;quot;place&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$type
&amp;gt; [1] &amp;quot;village&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$importance
&amp;gt; [1] 0.385
&amp;gt; 
&amp;gt; [[1]]$icon
&amp;gt; [1] &amp;quot;https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png&amp;quot;
&amp;gt; 
&amp;gt; 
&amp;gt; [[2]]
&amp;gt; [[2]]$place_id
&amp;gt; [1] 3448536
&amp;gt; 
&amp;gt; [[2]]$licence
&amp;gt; [1] &amp;quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$osm_type
&amp;gt; [1] &amp;quot;node&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$osm_id
&amp;gt; [1] 458633446
&amp;gt; 
&amp;gt; [[2]]$boundingbox
&amp;gt; [1] &amp;quot;16.551667&amp;quot;  &amp;quot;16.591667&amp;quot;  &amp;quot;-97.053333&amp;quot; &amp;quot;-97.013333&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$lat
&amp;gt; [1] &amp;quot;16.571667&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$lon
&amp;gt; [1] &amp;quot;-97.033333&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$display_name
&amp;gt; [1] &amp;quot;Texcoco, Santa María Sola, Oaxaca, México&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$class
&amp;gt; [1] &amp;quot;place&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$type
&amp;gt; [1] &amp;quot;hamlet&amp;quot;
&amp;gt; 
&amp;gt; [[2]]$importance
&amp;gt; [1] 0.36
&amp;gt; 
&amp;gt; [[2]]$icon
&amp;gt; [1] &amp;quot;https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;We start with &lt;a href=&#34;https://www.openstreetmap.org/&#34; target=&#34;_blank&#34;&gt;Open Street Map&lt;/a&gt; and its API &lt;a href=&#34;https://nominatim.openstreetmap.org/ui/about.html&#34; target=&#34;_blank&#34;&gt;nominatim&lt;/a&gt;. In the piece of code above we can see how to perform a simple query for one city. It is basically one long string containing first the url of nominatim and at the end the search details: here we start the search with city using &lt;code&gt;?city=Texcoco&lt;/code&gt;, in this case I aimed for a city with only a few results. Next we are limiting the amount of results to 9 with &lt;code&gt;&amp;amp;limit=9&lt;/code&gt; and finally requesting the results in format JSON.&lt;/p&gt;
&lt;p&gt;We could basically copy the string that we are passing to &lt;code&gt;site&lt;/code&gt; and paste it in the web browser to see the results directly there. Feel free to change the city &lt;code&gt;Texcoco&lt;/code&gt; to any other city, and play a bit more with the rest of the parameters. Particularly have a look at what happens when you remove the &lt;code&gt;&amp;amp;format=json&lt;/code&gt; part or when you exchange &lt;code&gt;json&lt;/code&gt; for any other abstract string like &lt;code&gt;csv&lt;/code&gt; or other non-recognized format.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A more specific query&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;city &amp;lt;- &#39;San%20Francisco&#39;
state &amp;lt;- &#39;&amp;amp;state=California&#39;
country &amp;lt;- &#39;&amp;amp;countrycodes=US&#39;
start.nominatim &amp;lt;- &amp;quot;http://nominatim.openstreetmap.org/search?city=&amp;quot;
end.nominatim &amp;lt;- &amp;quot;&amp;amp;format=json&amp;quot;

site &amp;lt;- paste0(start.nominatim, city, country, state, end.nominatim)
(result &amp;lt;- fromJSON(site))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [[1]]
&amp;gt; [[1]]$place_id
&amp;gt; [1] 297054975
&amp;gt; 
&amp;gt; [[1]]$licence
&amp;gt; [1] &amp;quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$osm_type
&amp;gt; [1] &amp;quot;relation&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$osm_id
&amp;gt; [1] 111968
&amp;gt; 
&amp;gt; [[1]]$boundingbox
&amp;gt; [1] &amp;quot;37.6403143&amp;quot;  &amp;quot;37.929811&amp;quot;   &amp;quot;-123.173825&amp;quot; &amp;quot;-122.281479&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$lat
&amp;gt; [1] &amp;quot;37.7790262&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$lon
&amp;gt; [1] &amp;quot;-122.419906&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$display_name
&amp;gt; [1] &amp;quot;San Francisco, CAL Fire Northern Region, California, United States&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$class
&amp;gt; [1] &amp;quot;boundary&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$type
&amp;gt; [1] &amp;quot;administrative&amp;quot;
&amp;gt; 
&amp;gt; [[1]]$importance
&amp;gt; [1] 1.035131
&amp;gt; 
&amp;gt; [[1]]$icon
&amp;gt; [1] &amp;quot;https://nominatim.openstreetmap.org/ui/mapicons/poi_boundary_administrative.p.20.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you explore OSM and nominatim a bit you will see that we can add search arguments using &lt;code&gt;&amp;amp;&lt;/code&gt; followed by the argument we want (i.e., &lt;code&gt;state&lt;/code&gt;), the symbol equal &lt;code&gt;=&lt;/code&gt; and the argument. In my example above you can see how we are specifying the State and Country of our query. Additionally it is important to know how to pass spaces in a name, for example, San Francisco will be passed as &lt;code&gt;San%20Francisco&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this basic information in mind and knowing that the package &lt;code&gt;RJSONIO&lt;/code&gt; helps us to retrieve the data from the JSON api into an R-friendly format, we can easily prepare a function to search for any city quickly, provided a few extra details like a region, state or county, and especially important, the country (try searching for cities like London or Prague without providing a country, you might be surprised of how many cities exist in the world with such names).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;coords_from_city &amp;lt;- function(City,
                             CountryTwoLetter,
                             Region = NULL,
                             State = NULL,
                             County = NULL){
    require(&#39;RJSONIO&#39;)
    CityCoded &amp;lt;- gsub(&#39; &#39;,&#39;%20&#39;,City) #remove space for URLs
    CountryCoded &amp;lt;- paste(&amp;quot;&amp;amp;countrycodes=&amp;quot;, CountryTwoLetter, sep = &#39;&#39;)
    extras &amp;lt;- c(state = State, region = Region, county = County)
    extrasCoded &amp;lt;- &#39;&#39;
    if(!is.null(extras)) {
        for(i in 1:length(extras)){
            if(extras[i] != &#39;&#39; &amp;amp;&amp;amp; !is.na(extras[i]) &amp;amp;&amp;amp; !grepl(&amp;quot;^\\s*$&amp;quot;, extras[i])){
                valCoded &amp;lt;- gsub(&#39; &#39;, &#39;%20&#39;, extras[i])
                extrasCoded &amp;lt;- paste0(extrasCoded, &#39;&amp;amp;&#39;, names(extras)[i], &#39;=&#39;, valCoded)
            }
        }
    }
    ## get data
    url &amp;lt;- paste(
        &amp;quot;http://nominatim.openstreetmap.org/search?city=&amp;quot;
      , CityCoded
      , CountryCoded
      , extrasCoded
      , &amp;quot;&amp;amp;format=json&amp;quot;
      , sep=&amp;quot;&amp;quot;)
    x &amp;lt;- fromJSON(url)
    ## retrieve coords
    if(is.vector(x)){
            message(paste(&#39;Found&#39;, x[[1]]$display_name))
            lon &amp;lt;- x[[1]]$lon
            lat &amp;lt;- x[[1]]$lat
            osm_name &amp;lt;- x[[1]]$display_name
            coords &amp;lt;- data.frame(&#39;lon&#39; = lon, &#39;lat&#39; = lat, &#39;osm_name&#39; = osm_name)
    }
    ## When x is not a vector
    else{
        message(paste(&#39;No results found for&#39;, City, CountryTwoLetter))
        coords &amp;lt;- data.frame(&#39;lon&#39; = NA, &#39;lat&#39; = NA)
    }
    ## return a df
    coords
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An important detail to know is that often, providing values to either &lt;code&gt;state&lt;/code&gt; or &lt;code&gt;region&lt;/code&gt; parameters returns similar results, this is particularly useful in countries where no states are used or other forms of organization are present. However, when the country has &amp;ldquo;States&amp;rdquo;, you cannot pass the name of a State to the parameter &lt;code&gt;Region&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function returns a data frame that we will use later to create a table with all of our results. Since we are interested in creating maps, we only need the coordinates expressed in latitude and longitude parameters. In case the query is not found, it fills the values with &lt;code&gt;NA&lt;/code&gt;&amp;rsquo;s, which later we&amp;rsquo;ll use to keep track of what was found and what wasn&amp;rsquo;t. We are also keeping the values inside &lt;code&gt;osm_name&lt;/code&gt; which provides enough information to tell the user useful details regarding the search results, including the country of the city found, and other details like state or region.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_II/maps_coords_from_city.png&#34; alt=&#34;Function coords_from_city() in detail&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;An important point to consider in &lt;code&gt;coords_from_city&lt;/code&gt; is that it will return only the top result from the query. It means that the more information you provide, the more accurate your result will be. For our project it worked well because for big countries we were always collecting enough info about regions and states, while for smaller countries often the options were too small. But if you use the function it is important to know that if you provide a city name like &lt;code&gt;Springfield&lt;/code&gt;, &lt;code&gt;Country = &#39;US&#39;&lt;/code&gt; and give no info about State and County, the function will retrieve only the top result from the search and discard the remaining options.&lt;/p&gt;
&lt;h2 id=&#34;keeping-the-info-in-a-database&#34;&gt;Keeping the info in a database&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;coords_from_city&lt;/code&gt; could be enough if we need to retrieve info about a few cities; we could make a for loop, retrieve all the coords we need and sore them in a data frame to later save as csv, &lt;code&gt;Rdata&lt;/code&gt; or any format we choose. The same is true when we are searching for hundreds or thousands of cities but with data increasing the searching time also increases. If, for any reason, the R session breaks, the information would be lost and we will have to start all over again from row 1. Therefore, we are going to send every single result to a database. In that way, no matter when we stop the process or how this happens, the data is safely stored outside of R.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;webscrap_to_sqlite &amp;lt;- function(db.name,
                               dat,
                               col.city = &#39;City&#39;,
                               col.country = &#39;Country&#39;,
                               region = NULL,
                               state = NULL,
                               county = NULL)
{
    require(RSQLite)
    df_len &amp;lt;- nrow(dat)
    ## Connect to db and table
    con &amp;lt;- dbConnect(drv=SQLite(), dbname=db.name)
    dbExecute(conn = con,
                &amp;quot;CREATE TABLE IF NOT EXISTS orgs
                    (ID INTEGER UNIQUE,
                     City TEXT, osm_name TEXT,
                     lon REAL,lat REAL)&amp;quot;)
    ## -- Iteration to web-scrap data -- ##
    ccount &amp;lt;- 0
    ## For loop to webscrapping
    for(i in 1:df_len){
        rg &amp;lt;- ifelse(is.null(region), &#39;&#39;, dat[[region]][i])
        st &amp;lt;- ifelse(is.null(state), &#39;&#39;, dat[[state]][i])
        ct &amp;lt;- ifelse(is.null(county), &#39;&#39;, dat[[county]][i])
        print(paste(&#39;Entry&#39;, i))
        ## Do the webscrap
        coords &amp;lt;- coords_from_city(dat[[col.city]][i],
                                   dat[[col.country]][i],
                                   Region = rg, State = st, County = ct)
        ## DB send query ONLY if coords were found
        if(is.na(coords$lon[1])){
            ccount &amp;lt;- ccount + 1
        }
        else{
            sq &amp;lt;- dbExecute(con, &#39;INSERT OR IGNORE INTO orgs
                             (ID, City, osm_name, lon, lat)
                             VALUES (?, ?, ?, ?, ?);&#39;,
                        list(dat[[&#39;ID&#39;]][i], dat[[col.city]][i],
                             coords$osm_name, coords$lon[1], coords$lat[1]))
        }
        print(paste(&#39;Completed&#39;, (i/df_len)*100, &#39;%&#39;))
    }
    ## Close db
    dbDisconnect(con)
    message(paste(&amp;quot;WEB SCRAP FOR COORDINATES SEARCH FINISHED.&amp;quot;,
                ccount, &amp;quot;ENTRIES NOT FOUND&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For storing the data I have chosen to use &lt;a href=&#34;https://www.sqlite.org/index.html&#34; target=&#34;_blank&#34;&gt;SQLite&lt;/a&gt; through the R package &lt;a href=&#34;https://rsqlite.r-dbi.org/&#34; target=&#34;_blank&#34;&gt;RSQLite&lt;/a&gt;. If you are not familiar with SQL databases I recommend you to start with a general google search and then come back to the documentation of SQLite and the R package. I chose SQLite because we needed to have something light and portable that would allow us to move the information easily from country to country rather than a centralized database where we could store everything, but a very similar approach can be applied using other types of SQL databases.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;dbConnect()&lt;/code&gt; generates the SQLite file if it does not exist yet. Then we give SQLite the order to create the tables &lt;code&gt;orgs&lt;/code&gt; if doesn&amp;rsquo;t exist yet, and the structure for such table. Next we search for the coordinates of the entries one by one using &lt;code&gt;coords_from_city()&lt;/code&gt; and finally we send it to the database. In that way we could stop the process at any time and continue later by simply retrieving the table &lt;code&gt;orgs&lt;/code&gt; from the database, compare it with our original data and move forward from what is missing. For that, the column &lt;code&gt;ID&lt;/code&gt; is critical, it is the column that allows us to link an entry between the original data, the R data.frame and the SQL table.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_II/maps_webscrap_to_sqlite.png&#34; alt=&#34;Function webscrap_to_sqlite() in detail&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Our function also has a variable &lt;code&gt;ccount&lt;/code&gt; that counts each time an entry was not found. In that way, once the query is finished it will print the amount of entries that were not found. The reasons for not finding an entry can be many, among the most common ones that I encountered are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wrong spelling of the City name or excess of info (i.e., value &amp;ldquo;Prague, District 3&amp;rdquo; when the city name is simply &amp;ldquo;Prague&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Wrong spelling of the State, Region and/or County name.&lt;/li&gt;
&lt;li&gt;The given City is simply not in the database of Open Street Maps (it happened specially for very small villages).&lt;/li&gt;
&lt;li&gt;Breaks of the internet connection. This one is particularly important because sometimes running the query a second or third time would find cities that were not found the first time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To read the data back to R from SQL we simply need to make a connection to the database, read the table, and close the connection. The function &lt;code&gt;combine_df_sql&lt;/code&gt; takes care of that and at the same time joins our original data to the data stored in the database by the ID and the city name. This was important for the project because we wanted to keep the coordinates of the cities separated from the rest of the information due to some internal practical reasons. But I think that keeping all the data in SQL at once can facilitate many things. Among others, you could identify when a particular city was already found in the past and retrieve the coordinates from the database directly rather than making a connection to nominatim. I did that for a few countries and it reduces the querying time considerably. For the present post I decided to show the separated version of data in order to provide more tools to the reader.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;combine_df_sql &amp;lt;- function(db.file, original.data){
    require(dplyr)
    require(RSQLite)
    if(is.character(original.data)){
        if(grepl(&#39;.csv&#39;, original.data, fixed = T)){
            df &amp;lt;- read.csv(original.data)
        }
        else{
            stop(&amp;quot;Incorrect file format for data&amp;quot;)
        }
    }
    else if(is.data.frame(original.data)){
        df &amp;lt;- original.data
    }
    else{
        stop(&amp;quot;Incorrect data format&amp;quot;)
    }
    con &amp;lt;- dbConnect(drv=RSQLite::SQLite(), dbname = db.file)
    db &amp;lt;- dbReadTable(con, &amp;quot;orgs&amp;quot;)
    dbDisconnect(con)
    result &amp;lt;- left_join(df, db, by = c(&#39;ID&#39;, &#39;City&#39;))
    return(result)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another detail of our function is the ability to read either from the &lt;code&gt;csv&lt;/code&gt; file or from a &lt;code&gt;data.frame&lt;/code&gt;. Since we were working mainly with csv files and I used data frames for the unit tests, these 2 formats were enough. Feel free to modify or extend the function for the data formats that you might need.&lt;/p&gt;
&lt;h2 id=&#34;missing-data&#34;&gt;Missing data&lt;/h2&gt;
&lt;p&gt;As mentioned above, sometimes the results from the query would be incomplete and a second or third run were necessary but with a fewer rows. Some others I just needed to stop the query and continue later from where we left. And yet some other times the data was incomplete or wrong and this could be solved later with the data owner. The 3 scenarios required me to read the csv file to R, then the table from the database and compare them to filter the missing values. So I crafted the function &lt;code&gt;compare_db_data&lt;/code&gt; to compare the database (db) to the original data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;compare_db_data &amp;lt;- function(db.file, dat){
    require(dplyr)
    require(RSQLite)
    if(is.character(dat)){
        if(grepl(&#39;.csv&#39;, dat, fixed = T)){
            df &amp;lt;- read.csv(dat)
        }
        else{
            stop(&amp;quot;Incorrect file format for data&amp;quot;)
        }
    }
    else if(is.data.frame(dat)){
        df &amp;lt;- dat
    }
    else{
        stop(&amp;quot;Incorrect data format&amp;quot;)
    }
    con &amp;lt;- dbConnect(drv=RSQLite::SQLite(), dbname = db.file)
    db &amp;lt;- dbReadTable(con, &amp;quot;orgs&amp;quot;)
    dbDisconnect(con)
    filtered &amp;lt;- filter(df, !(as.character(ID) %in%
                              as.character(db$ID)))
    filtered
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned earlier, sometimes Open Street Maps would simply not have registered certain &amp;ldquo;cities&amp;rdquo; (in fact it happened only with really small villages or populations). For that the function &lt;code&gt;add_coords_manually&lt;/code&gt; would take a csv file with a particular structure to add the missing data. The csv file must have the following columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ID&lt;/code&gt; column named exactly like that and containing the same ID as the original data.&lt;/li&gt;
&lt;li&gt;A column containing the name of the city&lt;/li&gt;
&lt;li&gt;Columns containing the Latitude and Longitude were we want to point at the city&lt;/li&gt;
&lt;li&gt;A value for &lt;code&gt;osm_name&lt;/code&gt;. This could be left empty or we can provide the value we want in this slot. What is important is to have the column present in the csv file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, as in previous function, we pass to &lt;code&gt;add_coords_manually&lt;/code&gt; the name of the csv file with the complementary information, the name of the SQLite database and the names of the columns where we have the values for &lt;code&gt;city&lt;/code&gt; names, &lt;code&gt;osm_name&lt;/code&gt;, &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt;, all as strings. The rest of the function is self descriptive, provided basic knowledge of SQL syntax.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;add_coords_manually &amp;lt;- function(csv_file, db.name,
                                city, osm_name, lat, lon){
    require(tidyverse)
    require(RSQLite)
    csv_dat &amp;lt;- read_csv(csv_file)
    csv_len &amp;lt;- length(csv_dat$ID)
    con &amp;lt;- dbConnect(drv=RSQLite::SQLite(), dbname=db.name)
    for(i in 1:csv_len){
        dbSendQuery(con, &#39;INSERT OR IGNORE INTO orgs
                      (ID, City, osm_name, lon, lat)
                      VALUES (?, ?, ?, ?, ?);&#39;,
                    list(csv_dat[[&#39;ID&#39;]][i],
                         csv_dat[[city]][i],
                         csv_dat[[osm_name]][i],
                         csv_dat[[lat]][i],
                         csv_dat[[lon]][i]))
    }
    dbDisconnect(con)
    print(paste(csv_len, &#39;inserted&#39;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;If you are new to R you could probably already had noticed that one of the strengths of R that I&amp;rsquo;m using a lot here is its use of functions. The first maps that we created were done writing scripts with a few hundreds of lines. Those gave us the basis to craft the necessary functions and so, the rest of the maps were possible using just a few lines. Some of the scripts for the web scrapping of the coordinates consist of less than 10 lines of code. That is possible using the functions above and a few others created for special or particular cases. I will not share absolutely everything but I want to give an idea of how to make the process more efficient. You can always create more functions for your particular cases or modify my proposed functions to adapt to your particular situation.&lt;/p&gt;
&lt;p&gt;And speaking of extensibility, just while writting this blog I found out about the package &lt;a href=&#34;https://github.com/r-tmap/tmaptools&#34; target=&#34;_blank&#34;&gt;tmaptools&lt;/a&gt; which contains the function &lt;a href=&#34;https://www.rdocumentation.org/packages/tmap/versions/1.6-1/topics/geocode_OSM&#34; target=&#34;_blank&#34;&gt;geocode_OSM&lt;/a&gt; which uses nominatim to retrieve the coordinates of the searched point. The function has a more user friendly searching format and more possibilities for the return value, while my &lt;code&gt;coords_from_city()&lt;/code&gt; option stays quite stiff and still with the original format that it was envisioned a few years ago when I created it. If you are truly interested in the topic I invite you to check the package. Myself I have been busy maintaining the code and creating maps that I found little time to do any improvements to the original project. But that&amp;rsquo;s exactly my main task right now so, if I do any changes to the functions presented here using the &lt;a href=&#34;https://github.com/r-tmap/tmaptools&#34; target=&#34;_blank&#34;&gt;tmaptools&lt;/a&gt; package you can be sure that I will create a short post to share it as well.&lt;/p&gt;
&lt;p&gt;Then, once we got the coordinates of our target cities and we know how to make the basic map, the next step is to add the cities to the base map. In the next post I will show you how I did that and a function to make the process faster and efficient.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Map any region in the world with R - Part I: The basic map</title>
      <link>https://blog.rwhitedwarf.com/post/map_any_region_with_ggplot2_part_i/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/post/map_any_region_with_ggplot2_part_i/</guid>
      <description>&lt;h2 id=&#34;scope-of-this-post&#34;&gt;Scope of this post&lt;/h2&gt;
&lt;p&gt;When you prepare for a job interview one of the questions they always tell you to prepare is &amp;ldquo;What are you most proud of?&amp;rdquo;. Personally I&amp;rsquo;ve never been asked that question in a job interview but it kept me thinking. Some years ago I developed the R code for the creation of maps of infrastructure for a Political Sciences project, and I can say that this is one of the projects I&amp;rsquo;m most proud of. However, it is also true what they say to developers, that &lt;strong&gt;nobody cares about how you did it&lt;/strong&gt;. The final user only cared about what was done, while the research team about what are the possibilities. Due to the confidentiality agreement of the client, I also cannot share a git repository.&lt;/p&gt;
&lt;p&gt;The project taught me so much in terms of technical skills that I have decided to &lt;strong&gt;share the how&lt;/strong&gt; in case it can help somebody else. It is also my way to contribute to the R community since I myself learned R and programming thanks to the kind people who post their experience on the web (and to the ones who have the patience to answer questions in StackOverflow too).&lt;/p&gt;
&lt;p&gt;We created maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to &lt;strong&gt;map any region of the world with R&lt;/strong&gt;. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34;&gt;ggplot2&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt; packages, using support of &lt;a href=&#34;https://www.openstreetmap.org/&#34; target=&#34;_blank&#34;&gt;Open Street Map&lt;/a&gt; to obtain the coordinates of cities and finally making it interactive with &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34;&gt;shiny&lt;/a&gt;. The project is quite long for a single post, so my idea is to split it into a few smaller blog posts. The list can still change but I thought something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. The basic map
2. Web scrapping with nominatim open street maps
3. Maps with cities
4. Dynamic maps in time
5. Making a single script for fast replication
6. Making the code interactive in a shiny app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope you all enjoy it. Feel free to leave any kind of comment and/or question at the end.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;When I joined the team all what they knew is that the wanted to make maps of infrastructure (say hospitals, cafes, churches, public offices, etc., but the project can basically be applied to anything countable per city). The maps should change in time according to the data (usually growth) and it should be possible to apply it for any country and thus, any kind of city of that particular country can be listed there. This last point represents a challenge because to make a map you need the coordinates of a particular point to map, but instead we got address in the best scenario, or only city name in the worst. Therefore, we left it to the level of city and decided to work with that.&lt;/p&gt;
&lt;p&gt;Most R packages to make maps have granularity up to some regions and major cities per country, and we are talking about countries where somebody has develop some R package for that. However, even the best packages would miss some cities or some countries some times. We needed to standardize everything without the need of changing packages according to the particular country. Before I joined, the team attempted to use Google Maps and excel, but the amount of data became messy and the flexibility to edit the maps was pretty limited. And they didn&amp;rsquo;t want to add copyright issues to the list of limitations. Therefore I proposed to use R. Of course, nobody in the team had ever heard about it before. We could had used any other tool, I learned that both, Python and JavaScript have some decent possibilities. But R is what I have been using for the last 10 years and is what I wanted to use for this project. And so I started to code.&lt;/p&gt;
&lt;p&gt;The first couple of maps were custom code for a particular country with decent styles. But it quickly evolved into a set of functions and arguments to maintain the same standards for each map. The support of graphic designers also took the styles to a very professional level. After a few months we had very professional maps that could be done in couple of hrs (or less) with a couple of lines of code. Each map per each country with the desired span of years to be printed.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think I will share every single detail of it, but at least I want to show how we went from the basic map to its dynamic form mapping over a span of time, and how I wrapped it all together in a couple of functions to make it quickly replicable for any given data set. Let me know what you think.&lt;/p&gt;
&lt;h2 id=&#34;how-to-create-a-map-of-any-country-in-r-using-the-library-maps&#34;&gt;How to create a map of any country in R using the library maps&lt;/h2&gt;
&lt;p&gt;The first step is to create the basic map of a country. Here is the function to achieve exactly that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(maps)
library(ggplot2)

## make a df with only the country to overlap
map_data_es &amp;lt;- map_data(&#39;world&#39;)[map_data(&#39;world&#39;)$region == &amp;quot;Spain&amp;quot;,]

## The map (maps + ggplot2 )
ggplot() +
    ## First layer: worldwide map
    geom_polygon(data = map_data(&amp;quot;world&amp;quot;),
                 aes(x=long, y=lat, group = group),
                 color = &#39;#9c9c9c&#39;, fill = &#39;#f3f3f3&#39;) +
    ## Second layer: Country map
    geom_polygon(data = map_data_es,
                 aes(x=long, y=lat, group = group),
                 color = &#39;red&#39;, fill = &#39;pink&#39;) +
    coord_map() +
    coord_fixed(1.3,
                xlim = c(-13.5, 8.5),
                ylim = c(34, 45)) +
    ggtitle(&amp;quot;A map of Spain&amp;quot;) +
    theme(panel.background =element_rect(fill = &#39;blue&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/basic_map-1.png&#34; alt=&#34;plot of chunk basic_map&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;We are using the library &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt; in combination with &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34;&gt;ggplot2&lt;/a&gt;. The &lt;code&gt;maps&lt;/code&gt; package contains coordinates system for a map of the whole world separated by countries (although political borders might not be fully up to date). It can as well do the maps, but for that we are making use of &lt;code&gt;ggplot2&lt;/code&gt; support here.&lt;/p&gt;
&lt;p&gt;We start by extracting the data relevant to the country we want to map, in this case &lt;code&gt;Spain&lt;/code&gt;. It is of course important to pass the name of the country in the same way that it is written in &lt;code&gt;map_data(&#39;world&#39;)$region&lt;/code&gt;. You can use the function &lt;code&gt;unique()&lt;/code&gt; to find the exact names of all the countries included in the packages (&lt;code&gt;unique(map_data(&#39;world&#39;)$region)&lt;/code&gt; gives 252 countries at the moment of writing this post).&lt;/p&gt;
&lt;p&gt;Once we have the data for the one particular country, we could simply map it directly using &lt;code&gt;geom_polygon()&lt;/code&gt; however, that would map Spain surrounded by empty space around it. To place it in the context of its neighborhood, we apply two layers of &lt;code&gt;geom_polygon()&lt;/code&gt;: first one with the map of the whole world and secondly the map of the country only.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_BasicMap.png&#34; alt=&#34;The basic map code explained&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Then we need to tell &lt;code&gt;ggplot&lt;/code&gt; to use a coordinates system to create maps instead of just polygons. For that we use &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/coord_map.html&#34; target=&#34;_blank&#34;&gt;coord_map()&lt;/a&gt; function and then we pass the details of the map ratio, and limits in X and Y to the function &lt;code&gt;coord_fixed()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Up to here we can have our map. &lt;code&gt;ggplot&lt;/code&gt; is basically plotting what we are specifying inside the coordinates system, everything around it (the oceans) will be just empty and it will be filled in by the default grids and gray colors of &lt;code&gt;ggplot()&lt;/code&gt;. Thus, we need to define the color of the Oceans as the background color for the whole plot. That&amp;rsquo;s what the last line of code does.&lt;/p&gt;
&lt;p&gt;Of course there are a lot of improvements to do. So far I have given exaggerated colors to make obvious for the reader which piece of code controls what. In that sense you can see that you can simply pass the names of the colors, which applies the defaults, or you can be more specific and provide the html notation of the color (i.e., &lt;code&gt;&#39;#9c9c9c&#39;&lt;/code&gt;). So, let&amp;rsquo;s now improve the visuals and at the same time create a function to plot any country we want to.&lt;/p&gt;
&lt;h2 id=&#34;function-to-create-the-basic-map-in-r&#34;&gt;Function to create the basic map in R&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_country &amp;lt;- function(country, x_limits = NULL, y_limits = NULL){
    ## Verifying the arguments passed to the function
    if(!is.character(country)) stop(&amp;quot;Name of the country should be character&amp;quot;)
    if(length(country) != 1) stop(&amp;quot;Function supports only one country per map&amp;quot;)
    ## Load libraries
    require(maps)
    require(ggplot2)
    if(!country %in% map_data(&#39;world&#39;)$region) stop(&#39;Country name not recognized\nTo see a list of recognized countries run &amp;lt;unique(maps::map_data(&amp;quot;world&amp;quot;)$region)&amp;gt;&#39;)
    ## If coords limits missing, print worldwide map with coordinates system to allow
    ## User observe coords for reference
    if(missing(x_limits) || missing(y_limits)) {
        warning(&amp;quot;X and/or Y limits not provided.\nPrinting worldwide map.&amp;quot;)
        map_country_theme &amp;lt;- theme(panel.background = element_rect(fill = &#39;#4e91d2&#39;))
    }
    else {
        if(length(x_limits) != 2 || length(y_limits) != 2 ||
           !all(grepl(&#39;^-?[0-9.]+$&#39;, c(x_limits, y_limits)))){
            stop(&amp;quot;Limits for X and Y coords should be provided as vectors with two numeric values&amp;quot;)
        }
        else {
            ## All the received inputs are correct.
            ## Let&#39;s define our custom theme for the final map 
            map_country_theme &amp;lt;- theme_bw() +
                theme(panel.background = element_rect(fill = &#39;#4e91d2&#39;),
                      legend.position = &#39;none&#39;,
                      panel.grid.major = element_blank(),
                      panel.grid.minor = element_blank(),
                      axis.line = element_line(colour = &amp;quot;black&amp;quot;),
                      axis.title.x=element_blank(),
                      axis.text.x=element_blank(),
                      axis.ticks.x=element_blank(),
                      axis.title.y=element_blank(),
                      axis.text.y=element_blank(),
                      axis.ticks.y=element_blank())
        }
    }
    ## make a df with only the country to overlap
    map_data_country &amp;lt;- map_data(&#39;world&#39;)[map_data(&#39;world&#39;)$region == country,]
    ## The map (maps + ggplot2 )
    ggplot() +
        ## First layer: worldwide map
        geom_polygon(data = map_data(&amp;quot;world&amp;quot;),
                     aes(x=long, y=lat, group = group),
                     color = &#39;#9c9c9c&#39;, fill = &#39;#f3f3f3&#39;) +
        ## Second layer: Country map
        geom_polygon(data = map_data_country,
                     aes(x=long, y=lat, group = group),
                     color = &#39;#4d696e&#39;, fill = &#39;#8caeb4&#39;) +
        coord_map() +
        coord_fixed(1.3,
                    xlim = x_limits,
                    ylim = y_limits) +
        ggtitle(paste0(&amp;quot;A map of &amp;quot;, country)) +
        scale_x_continuous(n.breaks = 20) +
        scale_y_continuous(n.breaks = 20) +
        map_country_theme
}

## Test the function with a different country
map_country(&amp;quot;Germany&amp;quot;, c(-2, 22), c(47, 55))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/function_map-1.png&#34; alt=&#34;plot of chunk function_map&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Although the function might seem complicated at first, it is in fact the same code as we used to create the map, but instead of typing directly the name of the country or the limits for X and Y, we replace them with the arguments &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;x_limits&lt;/code&gt; and &lt;code&gt;y_limits&lt;/code&gt; respectively; in that way all the parts were we had the string &lt;code&gt;&amp;quot;Spain&amp;quot;&lt;/code&gt; we now have the argument &lt;code&gt;country&lt;/code&gt;, and so on. These are the only arguments that we need to change when we want to map a different country. You can define more arguments in case you want to have more possibilities to be editable, for example, we could define an argument &lt;code&gt;country_color&lt;/code&gt; to specify the color we want for the target country. In our case we wanted to keep the same standards for all the maps due to branding reasons and thus, we rather wanted to have the exact same colors and styles for all of our maps.&lt;/p&gt;
&lt;p&gt;There are also some additions on the top before the actual code to make the maps, all the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; statements that are simply used to validate that the information passed by the user is the info that we actually need to make the function work. If any incorrect argument is passed to the function, we stop the process and write a message of what is wrong using the function &lt;code&gt;stop()&lt;/code&gt;. For the case that no limits of either X or Y are defined, I send a warning message using &lt;code&gt;warning()&lt;/code&gt;. In that case the process continues but we define a &lt;code&gt;theme()&lt;/code&gt; that allows the user to see the country in the context of the worldwide map, with excess of values in the X and Y axes to provide the points of reference and give an idea of where to set the limits. By the end, when we ensure that all the values are fine, we define the final theme that we actually want to apply. About that, probably I should make special mention of &lt;code&gt;!all(grepl(&#39;^-?[0-9.]+$&#39;, c(x_limits, y_limits))))&lt;/code&gt;: it is used to ensure that X and Y limits are of type numeric. See the visualization of the code below together with the help of the function(s) you don&amp;rsquo;t understand for a more detail explanation. Feel free to test the errors and warnings by providing to the function no country names or letters where there should be numbers, etc.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_FunctionMap.png&#34; alt=&#34;Code of the function explained&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;The lower part of the function is exactly the same as our first map, replacing the actual values for the arguments. We also have changed the colors for more specific ones. Almost by the end of the function we have added &lt;code&gt;scale_x_continuous(n.breaks = 20)&lt;/code&gt; which will add 20 marks of the X axis scale (same for Y). We want to use it to ensure that, in case the user doesn&amp;rsquo;t have idea of which limit values to choose, it can have a good approach regarding the position of the target country. In case that both limits for X and Y are passed to the function, our other theme will mask this 20 breaks with &lt;code&gt;axis.text.x = element_blank()&lt;/code&gt; and &lt;code&gt;axis.ticks.x = element_blank()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The final line is the test that our function can plot a map other than Spain, in this case I chose Germany. We can basically choose any country included in the &lt;code&gt;maps&lt;/code&gt; package and now make the map with the same standards in one line of R code.&lt;/p&gt;
&lt;h2 id=&#34;final-remarks&#34;&gt;Final remarks&lt;/h2&gt;
&lt;p&gt;Here I am somehow showing one of the methods I use to create functions: I basically write first the code of what I want to achieve and once it does exactly what I want, I wrap it in a function, replacing the arguments that the user will need to modify later. Then I think what could go wrong and create the corresponding warnings an errors. It is a good practice to do that not only for the user to know better how to use the function, but also for yourself, it proves very useful when we need to debug code. Another good practice in R functions is the call to the libraries inside the function using &lt;code&gt;require()&lt;/code&gt;. Even if you are writing many functions that use the same libraries, is good to repeat it on each function to make it self contained and again, help yourself in the debugging process. Not long ago I started collaborating in a project where there was no call to the libraries per function, but rather only at the top level when the main action of the program was called. This made almost impossible for me to test and debug code so, the first activity I did as a new member of the team was to spend 2 full working days adding &lt;code&gt;require()&lt;/code&gt; where necessary.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_CompareCode.png&#34; alt=&#34;Code of the function explained&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;I hope you get some fun mapping different countries. Because different countries have different sizes and shapes, one way to improve the visuals related to this is by adjusting the ratio, for example, my own map of Germany looks out of shape, but it improves considerably if instead of 1.3 we give a ratio of 1.4, check the documentation to learn more about it.&lt;/p&gt;
&lt;p&gt;Once that we have the basic map, we could add the cities were we want to add data values. Unfortunately, for cities there are many limitations, specially for countries where no special packages has been created to be mapped, and even there, most packages of particular countries don&amp;rsquo;t contain all the cities, especially minor ones. Thus, in our second part I will show how I tackled this problem doing some web scrapping to open street maps.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
