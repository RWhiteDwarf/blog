<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R mapas on R with White Dwarf</title>
    <link>https://blog.rwhitedwarf.com/tags/r-mapas/</link>
    <description>Recent content in R mapas on R with White Dwarf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.rwhitedwarf.com/tags/r-mapas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Webscrap e iteraciones con R</title>
      <link>https://blog.rwhitedwarf.com/es/post/2023/webscrap_e_iteracion_con_r/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/es/post/2023/webscrap_e_iteracion_con_r/</guid>
      <description>&lt;h2 id=&#34;sobre-este-post&#34;&gt;Sobre este post&lt;/h2&gt;
&lt;p&gt;Estamos creando mapas de datos que muestran los cambios durante un período de tiempo para diferentes países y orientado a todo tipo de ciudades. Esto básicamente significa que necesitamos &lt;strong&gt;mapear cualquier región del mundo con R&lt;/strong&gt;. Hoy en día existen todo tipo de paquetes y técnicas para hacerlo. Quiero compartir la estrategia que utilicé con &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34;&gt;ggplot2&lt;/a&gt; y &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt;, utilizando el soporte de &lt;a href=&#34;https://www.openstreetmap.org/&#34; target=&#34;_blank&#34;&gt;Open Street Map&lt;/a&gt; para obtener las coordenadas de las ciudades y finalmente hacerlo interactivo con &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34;&gt;shiny&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Estas publicaciones comparten mi camino en la creación de la aplicación Shiny. Es un proyecto vivo en el que estoy trabajando actualmente y decidí compartir mis experiencias durante el proceso de creación. Estas publicaciones no son sólo acerca de Shiny apps, si no más bien sobre la creación del paquete detrás, incluyendo temas sobre la generación de funciones, creación de los mapas, clases de objetos, entre otros, incluyendo cualquier tema interesante que aparezca en el camino. Es mi manera de contribuir a la comunidad de R y al mismo tiempo documentar el proyecto en si mismo.&lt;/p&gt;
&lt;p&gt;Pueden encontrar todas las publicaciones en este tema bajo la etiqueta &lt;a href=&#34;https://blog.rwhitedwarf.com/tags/maps-app/&#34; target=&#34;_blank&#34;&gt;maps-app&lt;/a&gt; (incluyendo las versiones en inglés).&lt;/p&gt;
&lt;p&gt;También pueden encontrar el estado actual del proyecto en &lt;a href=&#34;https://github.com/teotenn&#34; target=&#34;_blank&#34;&gt;mi GitHub&lt;/a&gt; repo &lt;a href=&#34;https://github.com/teotenn/mapic&#34; target=&#34;_blank&#34;&gt;mapic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este post está escrito originalmente en español, desde el aeropuerto de Amsterdam, de camino a México. Espero que lo disfruten. Siéntanse libres de dejar cualquier tipo de comentario y/o pregunta al final.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_DrawingMap.png&#34; alt=&#34;R Maps&#34; /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;motivación&#34;&gt;Motivación&lt;/h2&gt;
&lt;p&gt;Como mencioné en los posts anteriores de la serie, he estado trabajando últimamente en el código para la creación de los mapas y he hecho cambios que incrementan la eficiencia de las funciones, la lectura del código, y facilitan su uso, al mismo tiempo que me permite extender las funciones mas allá de cómo fueron originalmente diseñadas.&lt;/p&gt;
&lt;p&gt;He mencionado en algunas ocasiones que el código evolucionó poco a poco a partir de scripts creados para generar el mapa específico de algún país. Por lo tanto, las primeras funciones son más bien una colección de los pasos utilizados para generar el mapa, atrapados en forma de funciones para automatizar el proceso.&lt;/p&gt;
&lt;p&gt;Por este motivo había querido hacer cambios para adecuar las funciones a paradigmas mas adecuados a la programación funcional, que es el punto fuerte de R. Sin embargo, la prioridad era generar los mapas, así que la mayoría de mi tiempo iba dirigido a la creación de los mapas y el debug del código cuando era necesario. A esto debo agregar que este proyecto es parte de un trabajo voluntario para una ONG, de la cual pasé a ser el director de la división de investigación, lo que me generaba aún mas responsabilidades y trabajo. Y todo como trabajo secundario, separado de mi fuente principal de ingresos (que también esta basada en R).&lt;/p&gt;
&lt;p&gt;Sin embargo, para bien o para mal, 2022 fue un año lleno de cambios y retos para mi y mi familia, lo que me obligó a dejar de lado el proyecto por un tiempo, resignar mi posición como director de la división, y enfocarme únicamente a mi carrera, mi salud y mi familia. Esto resultó en que, al recuperar la estabilidad en mi vida, me encontré con mas tiempo libre y menos obligaciones para re pensar el código y trabajar en ello. Adicionalmente, mi trabajo principal tuvo un giro que fue de la estadística a mas orientado a la programación en R, lo cual me ha dado mas herramientas para mejorar el código, y me ha motivado a retomar viejas lecciones sobre programación funcional y, sobre todo, iteración.&lt;/p&gt;
&lt;p&gt;Esto me permitió mejorar las dos funciones principales: la encargada del webscrapping y la que manda los datos a SQLite. Puedes encontrar las funciones originales en el post anterior &lt;a href=&#34;https://blog.rwhitedwarf.com/es/post/2022/mapa_de_cualquier_region_con_ggplot2_i/&#34; target=&#34;_blank&#34;&gt;Mapa de cualquier región del mundo con R - Parte I: El mapa base&lt;/a&gt; y compararlos con las nuevas funciones mejoradas en este.&lt;/p&gt;
&lt;h2 id=&#34;webscrapp-a-sqlite&#34;&gt;Webscrapp a SQLite&lt;/h2&gt;
&lt;p&gt;La función &lt;code&gt;webscrap_to_sqlite&lt;/code&gt; se encarga de enviar las coordenadas encontradas por Open Street Map a nuestra base de datos. La función como está definida originalmente es poco efectiva, ya que hace cada operación línea por línea. También es muy rígida en la forma en la que dirige los valores de las regiones, tanto su petición a la API como la colocación de los valores en la base de datos, lo que hace cualquier extensión o modificación muy complicada.&lt;/p&gt;
&lt;p&gt;Por lo tanto, es la función que recibió mas cambios, fue prácticamente re escrita desde ceros, haciendo la búsqueda mas eficiente, permitiendo también búsqueda interna de los datos ya almacenados; mas flexible, lidiando con los parámetros de las regiones de forma mas clara; y mas entendible, mejorando el estilo del código.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;webscrap_to_sqlite &amp;lt;- function(db.name,
                               dat,
                               city = &amp;quot;City&amp;quot;,
                               country = &amp;quot;Country&amp;quot;,
                               region = NULL,
                               state = NULL,
                               county = NULL,
                               db_backup_after = 10) {
  ## Cargas las liberarias necesarias
  require(RSQLite)
  require(dplyr)

  ## 1. Conexion a la DB
  con &amp;lt;- dbConnect(drv = SQLite(), dbname = db.name)
  dbExecute(conn = con,
            &amp;quot;CREATE TABLE IF NOT EXISTS orgs
                    (ID INTEGER UNIQUE,
                     City TEXT,
                     Country TEXT, 
                     Region TEXT,
                     State TEXT,
                     County TEXT,
                     osm_name TEXT,
                     lon REAL,
                     lat REAL)&amp;quot;)
  db &amp;lt;- as_tibble(dbReadTable(con, &amp;quot;orgs&amp;quot;))

  ## 2. Filtrado de los datos
  new_coords &amp;lt;- data.frame()
  dat_local &amp;lt;- compare_db_data(db.name, dat)
  df_len &amp;lt;- nrow(dat_local)

  ## 3. Mientras haya filas en DF repetimos:
  if (df_len != 0) {
    ## 3.1 Definir tamaño de la sub-muestra
    dat_local &amp;lt;- dat_local[c(1:db_backup_after), ]
    dat_local &amp;lt;- filter(dat_local, rowSums(is.na(dat_local)) != ncol(dat_local))

    ## 3.2 for loop para el webscrapping
    for (i in 1:nrow(dat_local)) {
      print(paste0(&amp;quot;Searching entry &amp;quot;, dat_local[[&amp;quot;ID&amp;quot;]][i]))
      
      ## 3.3 Abstracción de la info
      rg &amp;lt;- ifelse(is.null(region), &amp;quot;&amp;quot;, dat_local[[region]][i])
      st &amp;lt;- ifelse(is.null(state), &amp;quot;&amp;quot;, dat_local[[state]][i])
      ct &amp;lt;- ifelse(is.null(county), &amp;quot;&amp;quot;, dat_local[[county]][i])
      rcity &amp;lt;- dat_local[[city]][i]
      rcountry &amp;lt;- dat_local[[country]][i]

      ## 3.4 Obtener las coordenadas
      ## 3.4.1. Primero buscamos si ya existen en DB
      search_query &amp;lt;- filter(db, City == rcity, Country == rcountry,
                             Region == rg, State == st, County == ct)
      if (nrow(search_query != 0)) {
        coords &amp;lt;- search_query[1, ]
        coords$ID &amp;lt;- dat_local[[&amp;quot;ID&amp;quot;]][i]
        print(&amp;quot;Found from memory&amp;quot;)
        
        ## 3.4.2 Si aun no existen, busca en OSM API
      } else {
        coords &amp;lt;- coords_from_city(rcity, rcountry,
                                   Region = rg, State = st, County = ct)
        coords &amp;lt;- cbind(ID = dat_local[[&amp;quot;ID&amp;quot;]][i],
                        City = rcity,
                        Country = rcountry,
                        Region = rg,
                        State = st,
                        County = ct,
                        coords)
      }
      new_coords &amp;lt;- rbind(new_coords, coords)
    }

    ## Y envía sólo los nuevos resultados a la DB
    dbWriteTable(con, &amp;quot;orgs&amp;quot;, new_coords, append = TRUE)
    dbDisconnect(con)

    ## 3.4.3 Repetir
    webscrap_to_sqlite(db.name = db.name,
                       dat = dat,
                       city = city,
                       country = country,
                       region = region,
                       state = state,
                       county = county,
                       db_backup_after = db_backup_after)

    ## 4. Terminar la iteracion
  } else {
    db_final &amp;lt;- import_db_as_df(db.name)
    size &amp;lt;- nrow(db_final)
    not_found &amp;lt;- nrow(db_final[is.na(db_final$lat), ])
    message(paste(&amp;quot;Search finished.\n&amp;quot;,
                  size, &amp;quot;entries searched.\n&amp;quot;,
                  not_found, &amp;quot;ENTRIES NOT FOUND&amp;quot;))
  }
}        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función comienza llamando a las librerías necesarias y (1) conectándose a la base de datos, creándola si es necesario. (2) Luego genero dos data frames, uno vacío que almacenará nuevas coordenadas y otro relativo que contiene únicamente los datos que aún no existen en la base de datos. (3) Así pues, mientras haya datos en esta última data frame, la función continuará repitiéndose.&lt;/p&gt;
&lt;p&gt;(3.1) Luego definimos la sub-muestra, que es un sub conjunto de &lt;code&gt;dat_local&lt;/code&gt; del tamaño de &lt;code&gt;db_backup_after&lt;/code&gt; y nos enfocamos únicamente en esta sub-muestra. (3.2) Sobre esa sub muestra hacemos las iteraciones utilizando &lt;code&gt;for&lt;/code&gt; para obtener las coordenadas. Primero (3.3) preparamos la información como strings y después (3.4) buscamos las coordenadas. (3.4.1) Si ya existen en la base de datos lo tomamos de ahí, y si no (3.4.2) se buscan utilizado &lt;code&gt;coords_from_city&lt;/code&gt;. Finalmente, (3.4.3) repetimos todo de nuevo permitiendo a la función llamarse a si misma.&lt;/p&gt;
&lt;p&gt;Dado que en el paso 2 se filtran los datos que aún no están en la base de datos y en 3 se colocan los resultados de nuevas búsquedas en un data frame vacío, la función se llama a sí misma y aplica únicamente para cada sub conjunto de datos. Cuando finalmente &lt;code&gt;compare_db_data&lt;/code&gt; arroja 0 valores por que todos los datos que se ingresaron a la función ya están contenidos en la base de datos, podemos salir de la función. En este caso decidí importar de nuevo los datos desde SQLite para obtener detalles de la búsqueda, y terminar la iteración enviando un mensaje al usuario sobre el total de entradas y la cantidad de las cuales no fueron encontradas.&lt;/p&gt;
&lt;p&gt;Si comparamos esta función con la propuesta en mi post anterior, la función es completamente diferente pero el resultado final es el mismo. Los argumentos utilizados por la función también son los mismo y toman los mismos valores, lo cual evita conflictos para el usuario. El único parámetro nuevo es &lt;code&gt;db_backup_after&lt;/code&gt; que nos permite controlar a cada cuantas filas se realiza la iteración. Un valor mas pequeño significa más iteraciones, lo que resultado en un mayor uso de la memoria local, pero también mayor agilidad para encontrar datos que ya existen en la DB. Por otro lado, un valor mas alto reduce el número de iteraciones pero incrementa el número de conexiones a la API. Por este motivo le he otorgado un valor pre definido de 10. Esto, además de ser un valor balanceado, también reduce la confusión del usuario que podría no estar familiarizado con los cambios.&lt;/p&gt;
&lt;h2 id=&#34;remover-valores-faltantes-de-la-base-de-datos&#34;&gt;Remover valores faltantes de la base de datos&lt;/h2&gt;
&lt;p&gt;En la propuesta anterior, únicamente las coordenadas encontradas eran enviadas a la base de datos, y las no encontradas se ignoraban. En la propuesta presente, todas las entradas se envían a la DB. Por lo tanto, es importante tener alguna opción para remover las entradas no encontradas.&lt;/p&gt;
&lt;p&gt;Para ello generé la función &lt;code&gt;remove_na_from_db&lt;/code&gt;, una función muy simple pero que le otorga al usuario una propuesta remover &lt;code&gt;NA&lt;/code&gt;s automáticamente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remove_na_from_db &amp;lt;- function(db.file) {
  require(RSQLite)
  con &amp;lt;- dbConnect(drv = RSQLite::SQLite(), dbname = db.file)
  dbExecute(conn = con,
            &amp;quot;DELETE FROM orgs WHERE lon IS NULL OR trim(lon) = &#39;&#39;;&amp;quot;)
  dbDisconnect(con)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función es únicamente una conexión a la base de datos que envía la orden de remover filas donde el campo &lt;code&gt;lon&lt;/code&gt; está vacío, en sintaxis de SQLite. Esto es la manera mas segura, directa y rápida de hacerlo. También podríamos importar los datos de nuevo a R, filtrarlos y enviarlos de nuevo a SQLite, pero esto requeriría mayor uso de la memoria local, mayor cantidad de código y un mayor riesgo ya que requeriría re-escribir la base de datos a SQLite por completo. El poder de la librería &lt;code&gt;RSQLite&lt;/code&gt; (o cualquier otra librería que conecta a R con SQL) está precisamente en la posibilidad de pasar ordenes escritas y ejecutadas directamente en SQL.&lt;/p&gt;
&lt;h2 id=&#34;la-obtención-de-las-coordenadas&#34;&gt;La obtención de las coordenadas&lt;/h2&gt;
&lt;p&gt;La función &lt;code&gt;coords_from_city&lt;/code&gt; también recibió cambios considerables en lectura del código y flexibilidad, y un poco menores en funcionamiento y eficiencia.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;coords_from_city &amp;lt;- function(city = NULL,
                             country_code,
                             region = NULL,
                             state = NULL,
                             county = NULL) {
  require(&amp;quot;RJSONIO&amp;quot;)

  ## 1. Abstracción de regiones para OSM
  CityCoded &amp;lt;- gsub(&amp;quot; &amp;quot;, &amp;quot;%20&amp;quot;, City) 
  CountryCoded &amp;lt;- paste(&amp;quot;&amp;amp;countrycodes=&amp;quot;, CountryTwoLetter, sep = &amp;quot;&amp;quot;)
  extras &amp;lt;- c(city = City, state = State, region = Region, county = County)
  extrasCoded &amp;lt;- &amp;quot;&amp;quot;
  if (!is.null(extras)) {
    for (i in 1:length(extras)) {
      if (extras[i] != &amp;quot;&amp;quot; &amp;amp;&amp;amp; !is.na(extras[i]) &amp;amp;&amp;amp; !grepl(&amp;quot;^\\s*$&amp;quot;, extras[i])) {
        valCoded &amp;lt;- gsub(&amp;quot; &amp;quot;, &amp;quot;%20&amp;quot;, extras[i])
        extrasCoded &amp;lt;- paste0(extrasCoded, &amp;quot;&amp;amp;&amp;quot;, names(extras)[i], &amp;quot;=&amp;quot;, valCoded)
      }
    }
  }

  ## 2. Respuesta
  link &amp;lt;- paste(
    &amp;quot;http://nominatim.openstreetmap.org/search?city=&amp;quot;
  , extrasCoded
  , CountryCoded
  , &amp;quot;&amp;amp;format=json&amp;quot;
  , sep = &amp;quot;&amp;quot;
  )

  response &amp;lt;- try({fromJSON(link)},
                  silent = TRUE)

  if (class(response) == &amp;quot;try-error&amp;quot;) {
    stop(response[1])
  } else if (class(response) == &amp;quot;response&amp;quot;) {
    response_status &amp;lt;- http_status(response)
    if (response_status$category != &amp;quot;Success&amp;quot;) {
      stop(response_status$message)
    }
  } else if (is.list(response)) {

    ## 3. Organización de los resultados
    if (length(response) == 0) {
      message(paste(&amp;quot;No results found for&amp;quot;, extrasCoded))
      coords &amp;lt;- data.frame(&amp;quot;lon&amp;quot; = NA, &amp;quot;lat&amp;quot; = NA, &amp;quot;osm_name&amp;quot; = as.character(NA))
      
    } else if (length(response) == 1) {
      message(paste(&amp;quot;Found&amp;quot;, response[[1]]$display_name))
      coords &amp;lt;- data.frame(
        lon = response[[1]]$lon,
        lat = response[[1]]$lat,
        osm_name = response[[1]]$display_name
      )
      
    } else {
      message(paste(&amp;quot;Several entries found for&amp;quot;, city, country_code))
      coords &amp;lt;- data.frame(
        lon = response[[1]]$lon,
        lat = response[[1]]$lat,
        osm_name = response[[1]]$display_name
      )
    }
    
    ## 4. Salida como data frame
    return(coords)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Error: &amp;lt;text&amp;gt;:68:0: unexpected end of input
&amp;gt; 66:     return(coords)
&amp;gt; 67: }
&amp;gt;    ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El principal cambio está en la sección 1, en lugar de pasar cada una de las regiones como su propio string y darles formato una por una, las he abstraído todas en un solo vector. Esto reduce la cantidad de código, el uso de memoria, y nos permite incluir la ciudad en la lista, convirtiéndolo también en un valor opcional. La razón por la que las había preparado por separado publicación anterior es simplemente porque la función creció lentamente: al principio solo necesitábamos ciudad, pero luego tuvimos que usar algunos campos adicionales según el país en el que trabajábamos. Para facilitarme las cosas, simplemente agregué cada campo de región según fuera necesario. Ahora que tengo tiempo para trabajar en el código, esta fue la primera función que modifiqué.&lt;/p&gt;
&lt;p&gt;El paso 2 ahora imprime mensajes que nos ayudan a identificar el error cuando se trata de la conexión, al mismo tiempo que detiene el proceso. Ya sea un error local de conexión, o problemas del lado del API, obtendremos un mensaje y el proceso se detendrá, lo cual debe evitar tiempos de espera largos cuando no hay conexión y se está haciendo la búsqueda de muchas localidades.&lt;/p&gt;
&lt;p&gt;El paso 3 cambia un poco la organización de los resultados, devolviendo siempre un data frame con las mismas columnas cuando los resultados no fueron encontrados, pero ahora con los campos vacíos en dicho caso. Esto ayuda a las funciones presentadas anteriormente para llenar la base de datos. Adicionalmente, cuando muchos resultados fueron encontrados, se imprime esta información en pantalla; por ahora es sólo como información. La idea es mantener este espacio para realizar cambios en el futuro que nos permitan seleccionar la opción de manera interactiva. Esto es algo que aún necesito pensar y planear por que, por un lado quiero utilizarlo en una aplicación Shiny, y por otro lado queremos mantener la habilidad de que el web scrapping suceda automáticamente con menor intervención posible.&lt;/p&gt;
&lt;p&gt;Como ya he mencionado antes, estas nuevas funciones también nos permiten realizar búsquedas con el valor de ciudad vacío. Este fue un requisito solicitado en la última versión, ya que algunos usuarios comenzaron a hacer mapas por regiones, mientras que otros, al no encontrar ciudades muy pequeñas, decidieron agrupar los datos por región. Gracias a los cambios realizados en &lt;code&gt;coords_from_city&lt;/code&gt;, la función &lt;code&gt;webscrap_to_sqlite&lt;/code&gt; ahora puede obtener resultados cuando el valor para ciudad es &lt;code&gt;NA&lt;/code&gt;, considerando que se encuentren las coordenadas para la región o el estado. Aquí es importante mencionar que se recomienda utilizar el argumento &lt;code&gt;state&lt;/code&gt; para la búsqueda de regiones, por alguna razón, esto función mejor en la API de OSM. Como ejemplo, la búsqueda &lt;code&gt;coords_from_city(state = &amp;quot;Castilla La Mancha&amp;quot;, country_code = &amp;quot;ES&amp;quot;)&lt;/code&gt; nos arroja los resultados esperados, a pesar de que España no tiene estados; sin embargo si hacemos &lt;code&gt;coords_from_city(region = &amp;quot;Castilla La Mancha&amp;quot;, country_code = &amp;quot;ES&amp;quot;)&lt;/code&gt; nominatim no encuentra los resultados.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Estos cambios han resultado muy importantes para agilizar el proceso de la búsqueda de coordenadas y la automatización de la creación de mapas. Por otro lado, me permitió darle mas estilo al código y mejorar su eficiencia. Ya que mi principal proyecto por ahora es convertirlo en una aplicación Shiny, era importante para mi el mejorar el código y la eficiencia antes de lidiar con los detalles del server. Ya que este es un trabajo reciente que he realizado en los últimos meses, decidí compartirlo de inmediato ahora que tengo fresca la información de los cambios. Espero que pueda a ayudar a mas de uno a hacer código mas abstracto y practicar recursión.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapa de cualquier región del mundo con R - Parte I: El mapa base</title>
      <link>https://blog.rwhitedwarf.com/es/post/2022/mapa_de_cualquier_region_con_ggplot2_i/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.rwhitedwarf.com/es/post/2022/mapa_de_cualquier_region_con_ggplot2_i/</guid>
      <description>&lt;p&gt;Pueden encontrar todas las publicaciones en este tema bajo la etiqueta &lt;a href=&#34;https://blog.rwhitedwarf.com/tags/maps-app/&#34; target=&#34;_blank&#34;&gt;maps-app&lt;/a&gt; (incluyendo las versiones en inglés).&lt;/p&gt;
&lt;p&gt;También pueden encontrar el estado actual del proyecto en &lt;a href=&#34;https://github.com/teotenn&#34; target=&#34;_blank&#34;&gt;mi GitHub&lt;/a&gt; repo &lt;a href=&#34;https://github.com/teotenn/mapic&#34; target=&#34;_blank&#34;&gt;mapic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sobre-esta-entrada&#34;&gt;Sobre esta entrada&lt;/h2&gt;
&lt;p&gt;Cuando nos preparamos para una entrevista de trabajo, una de las preguntas que más recomiendan preparar es &amp;ldquo;Menciona el proyecto del que estés más orgulloso?&amp;rdquo;. Personalmente nunca me han hecho esa pregunta en una entrevista de trabajo pero me mantuvo pensando. Hace algunos años desarrollé el código en R para la creación de mapas de infraestructura para un proyecto de Ciencias Políticas, y puedo decir que este es uno de los proyectos de los que estoy más orgulloso. Sin embargo, también es cierto lo que comúnmente se dice entre los desarrolladores, que &lt;strong&gt;a nadie le importa cómo lo hiciste&lt;/strong&gt;. Al usuario final solo le interesa el producto final y cómo utilizarlo, mientras que al equipo de investigación le interesa saber las posibilidades que propone.&lt;/p&gt;
&lt;p&gt;El proyecto me enseñó tanto en términos de habilidades técnicas que he decidido compartir el &lt;strong&gt;cómo&lt;/strong&gt; en caso de que pueda ayudar a alguien más. También es mi forma de contribuir a la comunidad de R, ya que yo mismo aprendí R y programación gracias a las amables personas que publican su experiencia en la web (y también a los que tienen la paciencia de responder preguntas en StackOverflow). Debido al acuerdo de confidencialidad con mi cliente no puedo compartir el código completo o el repositorio de Git.&lt;/p&gt;
&lt;p&gt;Creamos mapas de datos que muestran los cambios durante un período de tiempo para diferentes países y orientados a todo tipo de ciudades. Esto básicamente significa que necesitamos &lt;strong&gt;mapear cualquier región del mundo con R&lt;/strong&gt;. Hoy en día existen todo tipo de paquetes y técnicas para hacerlo. Compartiré la estrategia que utilicé con &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34;&gt;ggplot2&lt;/a&gt; y &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt;, utilizando el soporte de &lt;a href=&#34;https://www.openstreetmap.org/&#34; target=&#34;_blank&#34;&gt;Open Street Map&lt;/a&gt; para obtener las coordenadas de las ciudades y finalmente hacerlo interactivo con &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34;&gt;shiny&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El proyecto es bastante largo para una sola publicación. Por otro lado, recientemente logré extraer el código base y hacerlo público sin comprometer la privacidad. También es un proyecto vivo en el que estoy trabajando actualmente. Por lo que decidí compartir mis experiencias durante el proceso de creación de la aplicación Shiny. Estas publicaciones no son sólo acerca de Shiny apps, si no más bien sobre la creación del paquete detrás. Tocaré temas sobre la generación de funciones, creación de los mapas, clases de objetos, entre otros, incluyendo cualquier tema interesante que aparezca en el camino. Es mi manera de contribuir a la comunidad de R y al mismo tiempo documentar el proyecto en si mismo.&lt;/p&gt;
&lt;p&gt;Espero que lo disfruten. Siéntanse libres de dejar cualquier tipo de comentario y/o preguntas al final.&lt;/p&gt;
&lt;h2 id=&#34;motivación&#34;&gt;Motivación&lt;/h2&gt;
&lt;p&gt;Cuando me uní al equipo, todo lo que sabían era que querían hacer mapas de infraestructura (por ejemplo hospitales, cafés, iglesias, oficinas públicas, etc., pero el proyecto básicamente se puede aplicar a cualquier cosa contable en una ciudad dada). Los mapas deben cambiar en el tiempo de acuerdo con los datos (generalmente crecimiento) y debe ser posible aplicarlo para cualquier país y, por lo tanto, cualquier tipo de ciudad en dicho país. Este último punto representa un desafío porque para hacer un mapa se necesitan las coordenadas del punto en particular para mapear, pero en cambio obtuvimos las dirección postales en el mejor escenario, o solo el nombre de la ciudad en el peor. Por lo tanto, lo dejamos a nivel de ciudad y decidimos trabajar con eso.&lt;/p&gt;
&lt;p&gt;La mayoría de los paquetes de R para hacer mapas tienen granularidad hasta algunas regiones y ciudades importantes por país, y estamos hablando de países donde alguien ha desarrollado algún paquete de R para eso. Sin embargo, incluso a los mejores paquetes les faltan algunas ciudades en sus datos. Necesitábamos estandarizar todo sin necesidad de cambiar paquetes por país. Antes de unirme, el equipo intentaron usar Google Maps y Microsoft Excel, pero la cantidad de datos se volvió desastrosa y la flexibilidad para editar los mapas era bastante limitada. Además no querían agregar problemas de derechos de autor o copyright a la lista de limitaciones. Por lo tanto, propuse usar R. Por supuesto, nadie en el equipo había oído hablar de él antes. Podríamos haber usado cualquier otra herramienta, aprendí que tanto Python como JavaScript tienen algunas posibilidades decentes. Pero R es lo que he estado usando durante los últimos 10 años y es lo que quería utilizar para este proyecto. Y así comencé a escribir código.&lt;/p&gt;
&lt;p&gt;Los primeros mapas eran códigos personalizados para un país en particular con estilos decentes. Pero rápidamente se convirtió en un conjunto de funciones y argumentos para mantener los mismos estándares para cada mapa. El apoyo de los diseñadores gráficos también llevó los estilos a un nivel muy profesional. Después de unos meses teníamos mapas muy profesionales que se podían hacer en un par de horas (o menos) con un par de líneas de código. Cada mapa por cada país con el lapso de años deseado para ser impreso.&lt;/p&gt;
&lt;p&gt;No puedo compartir cada uno de los detalles, pero al menos quiero mostrar cómo pasamos del mapa básico a su forma dinámica de mapeo durante un período de tiempo, y cómo lo envolví todo en un par de funciones para que sea rápidamente replicable para cualquier conjunto de datos dado. Siéntanse libres de compartir su opinión.&lt;/p&gt;
&lt;h2 id=&#34;cómo-crear-un-mapa-de-cualquier-país-en-r-usando-la-librería-maps&#34;&gt;Cómo crear un mapa de cualquier país en R usando la librería maps&lt;/h2&gt;
&lt;p&gt;El primer paso es crear el mapa básico de un país. Aquí está la función para lograr exactamente eso.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(maps)
library(ggplot2)

## hacer un df con sólo pais para traslapar
map_data_es &amp;lt;- map_data(&#39;world&#39;)[map_data(&#39;world&#39;)$region == &amp;quot;Spain&amp;quot;,]

## El mapa (maps + ggplot2 )
ggplot() +
    ## Primera capa: mapa del mundo
    geom_polygon(data = map_data(&amp;quot;world&amp;quot;),
                 aes(x=long, y=lat, group = group),
                 color = &#39;#9c9c9c&#39;, fill = &#39;#f3f3f3&#39;) +
    ## Segunda capa: mapa del país
    geom_polygon(data = map_data_es,
                 aes(x=long, y=lat, group = group),
                 color = &#39;red&#39;, fill = &#39;pink&#39;) +
    coord_map() +
    coord_fixed(1.3,
                xlim = c(-13.5, 8.5),
                ylim = c(34, 45)) +
    ggtitle(&amp;quot;A map of Spain&amp;quot;) +
    theme(panel.background =element_rect(fill = &#39;blue&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/basic_map-1.png&#34; alt=&#34;plot of chunk basic_map&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Utilizamos la librería &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/index.html&#34; target=&#34;_blank&#34;&gt;maps&lt;/a&gt; en combinación con [ggplot2](&lt;a href=&#34;https://cran.r-project.org/&#34; target=&#34;_blank&#34;&gt;https://cran.r-project.org/&lt;/a&gt; web/packages/ggplot2/index.html). El paquete &lt;code&gt;maps&lt;/code&gt; contiene un sistema de coordenadas para un mapa de todo el mundo separado por países (aunque es posible que las fronteras políticas no estén totalmente actualizadas). También puede hacer los mapas, pero para eso decidí hacer uso del soporte &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Empezamos extrayendo los datos relevantes del país que queremos mapear, en este caso &lt;code&gt;España&lt;/code&gt;. Por supuesto, es importante pasar el nombre del país de la misma manera que está escrito en &lt;code&gt;map_data(&#39;world&#39;)$region&lt;/code&gt;. Puedes usar la función &lt;code&gt;unique()&lt;/code&gt; para encontrar los nombres exactos de todos los países incluidos en los paquetes (si ejecutas &lt;code&gt;unique(map_data(&#39;world&#39;)$region)&lt;/code&gt; da 252 países al momento de escribir esta publicación).&lt;/p&gt;
&lt;p&gt;Una vez que tengamos los datos para un país en particular, podríamos simplemente mapearlo directamente usando &lt;code&gt;geom_polygon()&lt;/code&gt; sin embargo, eso mapearía a España rodeada por un espacio vacío a su alrededor. Para ubicarlo en el contexto de su vecindario, aplicamos dos capas de &lt;code&gt;geom_polygon()&lt;/code&gt;: la primera con el mapa de todo el mundo y la segunda con el mapa del país únicamente.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_BasicMap.png&#34; alt=&#34;Explicación del código básico del mapa&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Luego necesitamos decirle a &lt;code&gt;ggplot&lt;/code&gt; que use un sistema de coordenadas para crear mapas en lugar de sólo polígonos. Para eso usamos la función &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/coord_map.html&#34; target=&#34;_blank&#34;&gt;coord_map()&lt;/a&gt; y luego pasamos los detalles de la proporción del mapa y los límites en X e Y a la función &lt;code&gt;coord_fixed( )&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hasta aquí podemos obtener nuestro mapa. &lt;code&gt;ggplot&lt;/code&gt; está básicamente trazando lo que estamos especificando dentro del sistema de coordenadas, todo a su alrededor (los océanos) estará vacío y el gráfico será completado con las cuadrículas predeterminadas y los colores grises de &lt;code&gt;ggplot()&lt;/code&gt;. Por lo tanto, necesitamos definir el color de los océanos como color de fondo para todo el gráfico. Eso es lo que hace la última línea de código.&lt;/p&gt;
&lt;p&gt;Por supuesto, hay muchas mejoras que hacer aún. Hasta ahora he dado colores exagerados para que el lector sepa qué fragmento de código controla qué. En ese sentido, puedes notar que se puede simplemente pasar los nombres de los colores, lo cual aplica los valores predeterminados, o se puede ser más específico y proporcionar la notación html del color (es decir, &lt;code&gt;&#39;#9c9c9c&#39;&lt;/code&gt;). Con esto podemos ahora mejorar las imágenes y al mismo tiempo crear una función para trazar cualquier país que queramos.&lt;/p&gt;
&lt;h2 id=&#34;función-para-crear-el-mapa-básico-en-r&#34;&gt;Función para crear el mapa básico en R&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_country &amp;lt;- function(country, x_limits = NULL, y_limits = NULL){
    ## Verificar los argumentos tomados por la función
    if(!is.character(country)) stop(&amp;quot;Nombre del país debe ser de tipo string&amp;quot;)
    if(length(country) != 1) stop(&amp;quot;La función soporta sólo un país por mapa&amp;quot;)
    ## Cargar las librerías
    require(maps)
    require(ggplot2)
  if(!country %in% map_data(&#39;world&#39;)$region) stop(&#39;Nombre del país no reconocido\nPara ver una lista de paises reconocidos ejecute &amp;lt;unique(maps::map_data(&amp;quot;world&amp;quot;)$region)&amp;gt;&#39;)
  ## Si no se proporcionaron los limites de las coordenadas, imprime el mapa mundial
    if(missing(x_limits) || missing(y_limits)) {
        warning(&amp;quot;Límites de X y/o Y no han sido encontrados.\nImprimiendo el mapa mundial&amp;quot;)
        map_country_theme &amp;lt;- theme(panel.background = element_rect(fill = &#39;#4e91d2&#39;))
    }
    else {
        if(length(x_limits) != 2 || length(y_limits) != 2 ||
           !all(grepl(&#39;^-?[0-9.]+$&#39;, c(x_limits, y_limits)))){
            stop(&amp;quot;Los límites de las coordenadas X y Y deben ser ingresadas como vectores con dos valores numéricos&amp;quot;)
        }
        else {
            ## Definiendo el tema seleccionado para el mapa final
            map_country_theme &amp;lt;- theme_bw() +
                theme(panel.background = element_rect(fill = &#39;#4e91d2&#39;),
                      legend.position = &#39;none&#39;,
                      panel.grid.major = element_blank(),
                      panel.grid.minor = element_blank(),
                      axis.line = element_line(colour = &amp;quot;black&amp;quot;),
                      axis.title.x=element_blank(),
                      axis.text.x=element_blank(),
                      axis.ticks.x=element_blank(),
                      axis.title.y=element_blank(),
                      axis.text.y=element_blank(),
                      axis.ticks.y=element_blank())
        }
    }
    ## Un df con el pais a agregar únicamente
    map_data_country &amp;lt;- map_data(&#39;world&#39;)[map_data(&#39;world&#39;)$region == country,]
    ## El mapa (maps + ggplot2 )
    ggplot() +
        ## Primera capa: mapa mundial
        geom_polygon(data = map_data(&amp;quot;world&amp;quot;),
                     aes(x=long, y=lat, group = group),
                     color = &#39;#9c9c9c&#39;, fill = &#39;#f3f3f3&#39;) +
        ## Segunda capa: mapa del país
        geom_polygon(data = map_data_country,
                     aes(x=long, y=lat, group = group),
                     color = &#39;#4d696e&#39;, fill = &#39;#8caeb4&#39;) +
        coord_map() +
        coord_fixed(1.3,
                    xlim = x_limits,
                    ylim = y_limits) +
        ggtitle(paste0(&amp;quot;A map of &amp;quot;, country)) +
        scale_x_continuous(n.breaks = 20) +
        scale_y_continuous(n.breaks = 20) +
        map_country_theme
}

## Probando la función con un país diferente
map_country(&amp;quot;Germany&amp;quot;, c(-2, 22), c(47, 55))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/function_map-1.png&#34; alt=&#34;plot of chunk function_map&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Aunque la función puede parecer complicada al principio, de hecho es el mismo código que usamos para crear el mapa en un principio, pero en lugar de escribir directamente el nombre del país o los límites para X o Y, los reemplazamos con los argumentos &lt;code&gt;país &lt;/code&gt;, &lt;code&gt;x_limits&lt;/code&gt; y &lt;code&gt;y_limits&lt;/code&gt; respectivamente; de esa manera todas las partes donde teníamos el string &lt;code&gt;&amp;quot;España&amp;quot;&lt;/code&gt; ahora tenemos el argumento &lt;code&gt;país&lt;/code&gt;, y así sucesivamente. Ahora estos son los únicos argumentos que necesitamos cambiar cuando queremos mapear un país diferente. Puedes definir más argumentos en caso de que quieras tener más posibilidades de ser editable, por ejemplo, podríamos definir un argumento &lt;code&gt;country_color&lt;/code&gt; para especificar el color que queremos para el país de destino. En nuestro caso, queríamos mantener los mismos estándares para todos los mapas por motivos de control de calidad, por lo tanto, queríamos tener exactamente los mismos colores y estilos para todos nuestros mapas.&lt;/p&gt;
&lt;p&gt;También hay algunas adiciones en la parte superior antes del código inicial para hacer los mapas: son una serie de declaraciones &lt;code&gt;if&lt;/code&gt; y &lt;code&gt;else&lt;/code&gt; que simplemente se usan para validar que la información ingresada por el usuario es la información que realmente necesita la función para hacer su trabajo. Si se ingresa algún argumento incorrecto a la función, detenemos el proceso y escribimos un mensaje de lo que está mal utilizando la función &lt;code&gt;stop()&lt;/code&gt;. Para el caso de que no se definan límites de X o Y, se envía un mensaje de advertencia usando &lt;code&gt;warning()&lt;/code&gt;. En ese caso el proceso continúa pero definimos un &lt;code&gt;theme()&lt;/code&gt; que permite al usuario ver el país en el contexto del mapa mundial, con exceso de valores en los ejes X e Y para proporcionar los puntos de referencia y dar un idea de dónde poner los límites. Al final, cuando nos aseguramos de que todos los valores estén bien, definimos el tema final que realmente queremos aplicar. A este respecto debería hacer una mención especial sobre &lt;code&gt;!all(grepl(&#39;^-?[0-9.]+$&#39;, c(x_limits, y_limits))))&lt;/code&gt;: se usa para asegurar que tanto los valores de X como Y son de tipo numérico. Puedes ver la visualización del código a continuación junto con la ayuda de las funciones que no comprendes para obtener una explicación más detallada. Siéntete libre de probar los errores y advertencias proporcionando a la función nombres de países o letras donde debería haber números, etc.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_FunctionMap.png&#34; alt=&#34;Código de la función explicada&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;La parte inferior de la función es exactamente igual a nuestro primer mapa, reemplazando los valores reales con los argumentos. También hemos cambiado los colores por unos más específicos. Casi al final de la función hemos agregado &lt;code&gt;scale_x_continuous(n.breaks = 20)&lt;/code&gt; que agrega 20 marcas en la escala del eje X (y después, lo mismo para Y). Usamos esto para asegurarnos de que, en caso de que el usuario no tenga idea de qué valores límite elegir, pueda tener un buen enfoque con respecto a la posición del país objetivo. En caso de que ambos límites para X e Y se ingresen a la función, nuestro otro tema enmascarará estas 20 marcas con &lt;code&gt;axis.text.x = element_blank()&lt;/code&gt; y &lt;code&gt;axis.ticks.x = element_blank()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La línea final es la prueba de que nuestra función puede trazar un mapa que no sea España, en este caso elegí Alemania. Básicamente, podemos elegir cualquier país incluido en el paquete &lt;code&gt;maps&lt;/code&gt; y entonces hacer el mapa con los mismos estándares en tan sólo una línea de código de R.&lt;/p&gt;
&lt;h2 id=&#34;observaciones-finales&#34;&gt;Observaciones finales&lt;/h2&gt;
&lt;p&gt;He querido mostrar aquí uno de los métodos que utilizo para crear funciones: básicamente escribo primero el código de lo que quiero lograr y, una vez que hace exactamente lo que quiero, lo envuelvo en una función, reemplazando valores por los argumentos que el usuario necesitará modificar más adelante. Luego pienso en qué podría salir mal y genero las advertencias y errores correspondientes. Es una buena práctica hacer eso no solo para que el usuario sepa mejor cómo usar la función, sino también para uno mismo, pues resulta muy útil cuando necesitamos depurar el código. Otra buena práctica en las funciones de R es la llamada a las librerías dentro de la función usando &lt;code&gt;require()&lt;/code&gt;. Incluso si se están escribiendo muchas funciones que usan las mismas bibliotecas, es bueno repetirlo en cada función, o al menos por script, para que se mantenga independiente y, nuevamente, nos ayude en el proceso de debug. No hace mucho comencé a colaborar en un proyecto donde no hacían la llamada a los paquetes de R por cada función, sino solo en el nivel superior cuando se llamaba al proceso principal del programa. Esto me hizo casi imposible probar y depurar el código, así que la primera actividad que hice como nuevo miembro del equipo fue pasar 2 días completos agregando &lt;code&gt;require()&lt;/code&gt; donde fuera necesario.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://blog.rwhitedwarf.com/post/2022/map_any_region_with_ggplot2_part_I/maps_CompareCode.png&#34; alt=&#34;Código de la función explicada&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Espero que te diviertas mapeando diferentes países. Debido a que los diferentes países tienen diferentes tamaños y formas, una forma de mejorar las imágenes es ajustando la proporción (&lt;code&gt;prportion&lt;/code&gt;), por ejemplo, mi propio mapa de Alemania parece fuera de forma, pero mejora considerablemente si en lugar de 1.3 le damos una proporción de 1.4, consulta la documentación para obtener más información al respecto.&lt;/p&gt;
&lt;p&gt;Una vez que tengamos el mapa básico, podríamos agregar las ciudades donde queremos agregar valores de datos. Desafortunadamente, para las ciudades hay muchas limitaciones, especialmente para países donde no se tienen pquetes específicos. E incluso en los que se tienen, la mayoría de los paquetes tienen carencias de algunas ciudades, especialmente cuando son muy pequeñas. Por lo tanto, en la segunda parte se verá como enfrentar este problema haciendo un poco de web scrap utilizando open street maps.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
